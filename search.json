[
  {
    "objectID": "posts/texas-am-football-historic-downfall/index.html",
    "href": "posts/texas-am-football-historic-downfall/index.html",
    "title": "Did Texas A&M have the most disappointing college football season of the 2000s?",
    "section": "",
    "text": "Expectations were high for this Aggies team heading into the season. It had just brought in the top recruiting class in the nation for not just 2022 but as long as recruiting class rankings have been around, according to 247 Sports recruiting rankings. You would think a team coming off an 8-4 season that adds the best (measured) recruiting class of all time would be pretty good, right? The voters of the AP Poll seemed to think so, ranking the Aggies No. 6 in the preseason. Boy, were they and pretty much everyone else wrong.\nTexas A&M finished the 2022 season with a measly 5-7 overall record and 2-6 record in the SEC Conference. The Aggies did what they could to salvage a 3-7 start, ending the season with a win over 1-11 UMass and a more impressive win over No. 16 LSU. So, what went wrong? Is it a coaching issue? Head coach Jimbo Fisher has been able to bring in the talent but not capitalize with nearly as many wins as expected. Aggies fans hope coaching isn’t the issue, as Fisher currently has the most expensive fully guaranteed contract in college football history, good through 2031. A buyout after this disappointing season would cost nearly $86 million.\nTexas A&M’s downfall this season was really bad; there’s no arguing that. Was it the worst college football collapse of the 2000s? To find out, I compiled a list of 40 other college football teams since 2000 that have marked by experts as the most disappointing. All of these teams were rated in the preseason AP top 25 and had high expectations crushed by a poor record, embarrassing loss or a variety of other factors.\nA differentiating aspect of this year’s Texas A&M team is its failure to qualify for a bowl game. To qualify, a team must have at least six wins and a winning percentage of .500. Let’s take a look at the Aggies next to the 13 other teams on this list who missed that mark, comparing final record and simple rating. Simple rating, provided by Sports Reference, takes into account both strength of schedule and average point differential. An average team has a simple rating of zero, with the higher rating the better.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(cowplot)\nlibrary(ggrepel)\n\nbama00 <- read.csv(\"Bama00.csv\")\noregst01 <- read.csv(\"OregSt01.csv\")\nflast01 <- read.csv(\"FlaSt01.csv\")\nnw01 <- read.csv(\"NW01.csv\")\nmissst01 <- read.csv(\"MissSt01.csv\")\nnu02 <- read.csv(\"NU02.csv\")\nauburn03 <- read.csv(\"Auburn03.csv\")\nkst04 <- read.csv(\"KSt04.csv\")\nmich05 <- read.csv(\"Mich05.csv\")\ntenn05 <- read.csv(\"Tenn05.csv\")\nnd06 <- read.csv(\"ND06.csv\")\nflast06 <- read.csv(\"FlaSt06.csv\")\nmich07 <- read.csv(\"Mich07.csv\")\nlouisville07 <- read.csv(\"Louisville07.csv\")\nugaandauburn08 <- read.csv(\"UGAandAuburn08.csv\")\nusc09 <- read.csv(\"USC09.csv\")\nou09 <- read.csv(\"OU09.csv\")\ntexas10 <- read.csv(\"Texas10.csv\")\ntam11 <- read.csv(\"TAM11.csv\")\nusc12 <- read.csv(\"USC12.csv\")\nark12 <- read.csv(\"Ark12.csv\")\nugaandfla13 <- read.csv(\"GAandFLA13.csv\")\nou14 <- read.csv(\"OU14.csv\")\nscandtam14 <- read.csv(\"SCandTAM14.csv\")\nauburn15 <- read.csv(\"Auburn15.csv\")\nmichst16 <- read.csv(\"MichSt16.csv\")\nnd16 <- read.csv(\"ND16.csv\")\nfsu17 <- read.csv(\"FSU17.csv\")\nmiami18 <- read.csv(\"Miami18.csv\")\nwisc18 <- read.csv(\"Wisc18.csv\")\nwash19 <- read.csv(\"Wash19.csv\")\ntexas19 <- read.csv(\"Texas19.csv\")\ntam19 <- read.csv(\"TAM19.csv\")\nmichst19 <- read.csv(\"MichSt19.csv\")\npsu20 <- read.csv(\"PSU20.csv\")\nisu21 <- read.csv(\"ISU21.csv\")\nnc21 <- read.csv(\"NC21.csv\")\ntam22 <- read.csv(\"TAM22.csv\")\n\nnewbama00 <- bama00 %>% mutate(Season = \"2000\")\nneworegst01 <- oregst01 %>% mutate(Season = \"2001\")\nnewflast01 <- flast01 %>% mutate(Season = \"2001\")\nnewnw01 <- nw01 %>% mutate(Season = \"2001\")\nnewmissst01 <- missst01 %>% mutate(Season = \"2001\")\nnewnu02 <- nu02 %>% mutate(Season = \"2002\")\nnewauburn03 <- auburn03 %>% mutate(Season = \"2003\")\nnewkst04 <- kst04 %>% mutate(Season = \"2004\")\nnewmich05 <- mich05 %>% mutate(Season = \"2005\")\nnewtenn05 <- tenn05 %>% mutate(Season = \"2005\")\nnewnd06 <- nd06 %>% mutate(Season = \"2006\")\nnewflast06 <- flast06 %>% mutate(Season = \"2006\")\nnewmich07 <- mich07 %>% mutate(Season = \"2007\")\nnewlouisville07 <- louisville07  %>% mutate(Season = \"2007\")\nnewugaandauburn08 <-ugaandauburn08 %>% mutate(Season = \"2008\")\nnewusc09 <- usc09 %>% mutate(Season = \"2009\")\nnewou09 <- ou09 %>% mutate(Season = \"2009\")\nnewtexas10 <- texas10 %>% mutate(Season = \"2010\")\nnewtam11 <- tam11 %>% mutate(Season = \"2011\")\nnewusc12 <- usc12 %>% mutate(Season = \"2012\")\nnewark12 <- ark12 %>% mutate(Season = \"2012\")\nnewugaandfla13 <- ugaandfla13 %>% mutate(Season = \"2013\")\nnewou14 <- ou14 %>% mutate(Season = \"2014\")\nnewscandtam14 <- scandtam14 %>% mutate(Season = \"2014\")\nnewauburn15 <- auburn15 %>% mutate(Season = \"2015\")\nnewmichst16 <-michst16 %>% mutate(Season = \"2016\")\nnewnd16 <- nd16 %>% mutate(Season = \"2016\")\nnewfsu17 <- fsu17 %>% mutate(Season = \"2017\")\nnewmiami18 <- miami18 %>% mutate(Season = \"2018\")\nnewwisc18 <- wisc18 %>% mutate(Season = \"2018\")\nnewwash19 <- wash19 %>% mutate(Season = \"2019\")\nnewtexas19 <- texas19 %>% mutate(Season = \"2019\")\nnewtam19 <- tam19 %>% mutate(Season = \"2019\")\nnewmichst19 <- michst19 %>% mutate(Season = \"2019\")\nnewpsu20 <- psu20 %>% mutate(Season = \"2020\")\nnewisu21 <- isu21 %>% mutate(Season = \"2021\")\nnewnc21 <- nc21 %>% mutate(Season = \"2021\")\nnewtam22 <- tam22 %>% mutate(Season = \"2022\")\n\ndisappointments <- bind_rows(newbama00,neworegst01,newflast01,newnw01,newmissst01,newnu02,newauburn03,newkst04,newmich05,newtenn05,newnd06,newflast06,newmich07,newlouisville07,newugaandauburn08,newusc09,newou09,newtexas10,newtam11,newusc12,newark12,newugaandfla13,newou14,newscandtam14,newauburn15,newmichst16,newnd16,newfsu17,newmiami18,newwisc18,newwash19,newtexas19,newtam19,newmichst19,newpsu20,newisu21,newnc21,newtam22)\n\nworstoftheworst <- disappointments %>% \n  filter(\n    W<6\n  ) %>% \n  select(Team,Season,AP.Pre,W,L,SRS) %>% \n  arrange(AP.Pre)\n\nworstoftheworst %>% \n  gt() %>% \n  cols_label(\n    Team = \"School\",\n    AP.Pre = \"Preseason Ranking\",\n    W = \"Wins\",\n    L = \"Losses\",\n    SRS = \"Simple Rating\"\n  ) %>%\n  tab_header(\n    title = \"How does 2022 Texas A&M compare to the other biggest busts?\",\n    subtitle = \"The Aggies had the fourth-highest preseason ranking of this group of teams. They finished in the middle of the pack in simple rating and tied for the most total wins. \"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"Source: Sports Reference  |  By Ryan Kenney\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    \n  tab_style(\n    style = list(\n      cell_fill(color = \"#500000\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Texas A&M\")\n  )\n\n\n\n\n\n\n  \n    \n      How does 2022 Texas A&M compare to the other biggest busts?\n    \n    \n      The Aggies had the fourth-highest preseason ranking of this group of teams. They finished in the middle of the pack in simple rating and tied for the most total wins. \n    \n  \n  \n    \n      School\n      Season\n      Preseason Ranking\n      Wins\n      Losses\n      Simple Rating\n    \n  \n  \n    Alabama\n2000\n3\n3\n8\n1.04\n    Tennessee\n2005\n3\n5\n6\n4.25\n    Texas\n2010\n5\n5\n7\n1.71\n    Texas A&M\n2022\n6\n5\n7\n3.31\n    Penn State\n2020\n7\n4\n5\n4.22\n    Auburn\n2008\n10\n5\n7\n1.26\n    Arkansas\n2012\n10\n4\n8\n2.40\n    Florida\n2013\n10\n4\n8\n4.67\n    Notre Dame\n2016\n10\n4\n8\n4.27\n    Oregon State\n2001\n11\n5\n6\n3.16\n    Michigan State\n2016\n12\n3\n9\n-1.79\n    Kansas State\n2004\n13\n4\n7\n2.04\n    Northwestern\n2001\n16\n4\n7\n-1.01\n    Mississippi State\n2001\n20\n3\n8\n1.65\n  \n  \n    \n      Source: Sports Reference  |  By Ryan Kenney\n    \n  \n  \n\n\n\n\nLooking at the initial list of 41 teams, the median number of wins is seven, the average simple rating is 6.876341 and the median preseason ranking was eight. Therefore, I narrowed the list down to only the teams that met the following criteria:\n\nSeven or less total wins\nSimple rating less than 6.876341\nPreseason ranking of eighth or higher\n\n\n\nCode\ncontenders <- disappointments %>% \n  filter(\n    W<7,\n    SRS<6.876341,\n    AP.Pre<=8\n  )\n\n\nThis leaves us with the 2000 Alabama Crimson Tide, 2005 Tennessee Volunteers, 2010 Texas Longhorns, 2020 Penn State Nittany Lions and, of course, the 2022 Texas A&M Aggies.\nAh. Just like any good college football playoff, there’s four spots and more than four teams with an argument for making it. Luckily, it’s not too difficult to pick the team that gets left out here. Sorry 2020 Penn State, you don’t get to be in the final running for most disappointing college football team of the 2000s. A shortened season amidst the COVID-19 pandemic robbed the Nittany Lions of three regular season games. Plus, the other four teams have the highest preseason ranking of any of the teams in this list that missed a bowl game, meaning their collapses were more likely to be the most devastating.\n\n\nCode\nalabama2000 <- disappointments %>% filter(Team == \"Alabama\", Season == \"2000\")\ntennessee2005 <- disappointments %>% filter(Team == \"Tennessee\", Season == \"2005\")\ntexas2010 <- disappointments %>% filter(Team == \"Texas\", Season == \"2010\")\ntexasam2022 <- disappointments %>% filter(Team == \"Texas A&M\", Season == \"2022\")\n\nplayoffteams <- bind_rows(alabama2000, tennessee2005, texas2010, texasam2022)\n\nggplot() + \n  geom_point(\n    data=disappointments, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"black\", \n    alpha=.3) + \n  geom_point(\n    data=disappointments, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"gray\") + \n  geom_point(\n    data=alabama2000, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#9E1B32\") + \n  geom_point(\n    data=tennessee2005, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#FF8200\") +\n   geom_point(\n    data=texas2010, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#BF5700\") +\n   geom_point(\n    data=texasam2022, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#500000\") +\n  \n  geom_vline(xintercept = 6.876341) + \n  geom_hline(yintercept = 4.464634) +\n  \n  geom_text(aes(x=11.5, y=9, label=\"Good SRS, Good SOS\"), color=\"blue\") +\n  geom_text(aes(x=1, y=0, label=\"Bad SRS, Bad SOS\"), color=\"blue\") +\n  geom_text_repel(\n    data=playoffteams, \n    aes(x=SRS, y=SOS, label=Team)\n  ) +\n  \n   labs(\n    x=\"Simple Rating\", \n    y=\"Strength of Schedule\", \n    title=\"2000 Alabama did not win or play close often\", \n    subtitle=\"The 2000 Crimson Tide had three wins and the lowest simple rating of the four teams in question.\", \n    caption=\"Source: Sports Reference | By Ryan Kenney\",\n    size=\"Wins\"\n    ) +\n  \n  theme_light() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size = 10),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nIt’s hard to make a call on the worst of the bunch based on this plot alone. However, the 2000 Alabama Crimson Tide do stand out as a front-runner in the race. The Crimson Tide scored the lowest simple rating of the four finalists. This means it not only won just three games, but it also didn’t play very closely in their losses or blowout the opponent in its wins often, if at all.\nLet’s take a deeper look at these four teams by the numbers, comparing them on both sides of the ball by displaying offensive points per game and opponent points per game in their respective seasons.\n\n\nCode\nbar1 <- ggplot() + \n  geom_bar(data=playoffteams, aes(x=reorder(Team, Off), weight=Off), fill=\"grey\") +\n  geom_bar(data=texasam2022, aes(x=reorder(Team, Off), weight=Off), fill=\"#500000\") +\n  coord_flip() + \n  \n  labs(title= \" The 2000 Alabama Crimson\", subtitle = \"   Alabama scored less points per game and\",  x=\"\", y=\"Points per Game\", caption = \"\") + \n  \n  theme_light() + \n  theme(\n     plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=9.5), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"panel\"\n    )\n\nbar2 <- ggplot() + \n  geom_bar(data=playoffteams, aes(x=reorder(Team, desc(Def)), weight=Def), fill=\"grey\") +\n  geom_bar(data=texasam2022, aes(x=reorder(Team, desc(Def)), weight=Def), fill=\"#500000\") +\n  coord_flip() + \n  \n  labs(title = \"Tide have the worst point differential\", subtitle= \"gave up more to opponents than the 2022 Aggies.\", x=\"\", y=\"Opponent Points per Game\",  caption=\"Source: Sports Reference | By Ryan Kenney\") + \n  \n  theme_light() + \n  theme(\n   plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=9.5), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\nplot_grid(bar1, bar2) \n\n\n\n\n\nNow, let’s see how these offensive and defensive numbers compare to the entire list of 41 disappointing teams.\n\n\nCode\nggplot() + \n  geom_point(data=disappointments, aes(x=Off, y=Def)) +\n  \n  geom_text(aes(x=20, y=13, label=\"Bad Offense, Good Defense\"), color=\"blue\") +\n  geom_text(aes(x=36.5, y=35, label=\"Good Offense, Bad Defense\"), color=\"blue\") +\n  geom_text(aes(x=36.5, y=13, label=\"Good Offense, Bad Defense\"), color=\"blue\") +\n  geom_text(aes(x=20, y=35, label=\"Good Offense, Bad Defense\"), color=\"blue\") +\n  geom_text_repel(\n    data=playoffteams, \n    aes(x=Off, y=Def, label=Team)\n  ) +\n  \n   geom_point(\n    data=alabama2000, \n    aes(x=Off, y=Def), \n    color=\"#9E1B32\") + \n  geom_point(\n    data=tennessee2005, \n    aes(x=Off, y=Def), \n    color=\"#FF8200\") +\n   geom_point(\n    data=texas2010, \n    aes(x=Off, y=Def), \n    color=\"#BF5700\") +\n   geom_point(\n    data=texasam2022, \n    aes(x=Off, y=Def), \n    color=\"#500000\") +\n  \n  geom_vline(xintercept = 28.52439) + \n  geom_hline(yintercept = 24.24634) +\n  \n   labs(\n    x=\"Points per Game\", \n    y=\"Opponent Points per Game\", \n    title=\"The four finalists are alike when compared to the rest\", \n    subtitle=\"All four teams rank below average on offense but above average on defense.\", \n    caption=\"Source: Sports Reference | By Ryan Kenney\"\n    ) +\n  \n  theme_light() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size = 10),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nCompared to the rest, all four teams have a below average offense and above average defense. It looks like defense wins the wrong kind of championship in this scenario.\nBetween the four of them, the 2005 Tennessee Volunteers scored the least points, but they also gave up the least. The 2010 Texas Longhorns did the opposite, scoring the most points but also giving up the most. That leaves 2022 Texas A&M as the second-best offense and defense and 2000 Alabama as the third-best offense and defense.\nBefore determining the biggest college football disappointment of the 2000s, let’s take a final look at the four finalists next to each other.\n\n\nCode\nplayoff <- playoffteams %>% \n  mutate(\n    PtDiff = Off-Def\n  ) %>% \n  select(Team,AP.Pre,W,L,SRS,PtDiff)\n\nplayoff %>% \n  gt() %>% \n  cols_label(\n    Team = \"School\",\n    AP.Pre = \"Preseason Ranking\",\n    W = \"Wins\",\n    L = \"Losses\",\n    SRS = \"Simple Rating\",\n    PtDiff = \"Average Point Differential\"\n  ) %>%\n  tab_header(\n    title = \"2000 Alabama win most disappointing team of the 2000s\",\n    subtitle = \"The Crimson Tide beat out 2022 Texas A&M for the worst season collapse in the 2000s.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"Source: Sports Reference  |  By Ryan Kenney\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=11)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    \n  tab_style(\n    style = list(\n      cell_fill(color = \"#9E1B32\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Team == \"Alabama\")\n  )\n\n\n\n\n\n\n  \n    \n      2000 Alabama win most disappointing team of the 2000s\n    \n    \n      The Crimson Tide beat out 2022 Texas A&M for the worst season collapse in the 2000s.\n    \n  \n  \n    \n      School\n      Preseason Ranking\n      Wins\n      Losses\n      Simple Rating\n      Average Point Differential\n    \n  \n  \n    Alabama\n3\n3\n8\n1.04\n-1.7\n    Tennessee\n3\n5\n6\n4.25\n0.0\n    Texas\n5\n5\n7\n1.71\n0.1\n    Texas A&M\n6\n5\n7\n3.31\n1.6\n  \n  \n    \n      Source: Sports Reference  |  By Ryan Kenney\n    \n  \n  \n\n\n\n\nDespite being rated the highest in the preseason AP poll, the 2000 Alabama Crimson Tide finished with the most losses, lowest simple rating and worst point differential of the four contenders for biggest college football bust of the 2000s.\nIf Texas A&M performs next season like it did in 2022, I might have to reconsider this decision. With another year for its historic recruiting class to develop, a fluid player market because of the transfer portal and the resources behind this program, it’s unlikely we will see this again out of the Aggies next year.\nFor now, the 2000 Alabama Crimson Tide are the most disappointing college football team of the 2000s. See, even Bama fans had to suffer through a painful year of their team like the rest of us. I guess the Tide just have a knack for winning championships of all kinds."
  },
  {
    "objectID": "posts/ucla-and-usc-meet-big-ten-style-football/index.html",
    "href": "posts/ucla-and-usc-meet-big-ten-style-football/index.html",
    "title": "How will new additions UCLA and USC fare in the old-school Big Ten Conference?",
    "section": "",
    "text": "Or, at least that’s what stereotypes say within college football circles. But, there does lie merit behind these stereotypes. That begs the question of how UCLA and USC, who are slated to join the Big Ten in 2024, will fare in conference play. The No. 10 USC Trojans are reaping the benefits of new head coach Lincoln Riley and Oklahoma transfer quarterback Caleb Williams while the No. 12 UCLA Bruins are seeing head coach Chip Kelly’s program revival finally come to life. Will these two teams be able to maintain success upon joining the Big Ten?\nEntering the 2022 college football season, the Big Ten had the lowest average total points per conference game (52.5) of any FBS conference since 2014. Meanwhile, the Pac-12 averaged a full touchdown and extra point more (59.5), coming in as the second-highest scoring power five conference on average. Big Ten games also see a much slower pace of play than Pac-12 games.\nSo, it’s not crazy to say a west coast Pac-12 team might struggle in a snowy, midday matchup against an experienced Big Ten squad. Let’s take a look at some numbers to see how these showdowns will go for UCLA and USC.\nIf we pretend UCLA and USC are in the Big Ten this season for the sake of comparison, how would their rushing offenses and defenses measure up to the rest of the conference through seven games?\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggbump)\nlibrary(ggrepel)\nlibrary(cowplot)\nlibrary(ggalt)\n\ndefense14 <- read_csv(\"defense14.csv\")\ndefense15 <- read_csv(\"defense15.csv\")\ndefense16 <- read_csv(\"defense16.csv\")\ndefense17 <- read_csv(\"defense17.csv\")\ndefense18 <- read_csv(\"defense18.csv\")\ndefense19 <- read_csv(\"defense19.csv\")\ndefense20 <- read_csv(\"defense20.csv\")\ndefense21 <- read_csv(\"defense21.csv\")\ndefense22 <- read_csv(\"defense22.csv\")\n\nteamdefense14 <- defense14 %>% \n  mutate(\n    Season = \"2014\"\n  )\nteamdefense15 <- defense15 %>% \n  mutate(\n    Season = \"2015\"\n  )\nteamdefense16 <- defense16 %>% \n  mutate(\n    Season = \"2016\"\n  )\nteamdefense17 <- defense17 %>% \n  mutate(\n    Season = \"2017\"\n  )\nteamdefense18 <- defense18 %>% \n  mutate(\n    Season = \"2018\"\n  )\nteamdefense19 <- defense19 %>% \n  mutate(\n    Season = \"2019\"\n  )\nteamdefense20 <- defense20 %>% \n  mutate(\n    Season = \"2020\"\n  )\nteamdefense21 <- defense21 %>% \n  mutate(\n    Season = \"2021\"\n  )\nteamdefense22 <- defense22 %>% \n  mutate(\n    Season = \"2022\"\n  )\nteamdefense <- bind_rows(teamdefense14, teamdefense15, teamdefense16, teamdefense17, teamdefense18, teamdefense19, teamdefense20, teamdefense21, teamdefense22)\n\nbigten22 <- read_csv(\"bigten22.csv\")\n\nbigtenoffense22 <- read_csv(\"bigtenoffense22.csv\")\nbigtendefense22 <- read_csv(\"bigtendefense22.csv\")\n\nuscOff <- bigtenoffense22 %>% filter(School == \"USC\")\nuclaOff <- bigtenoffense22 %>% filter(School == \"UCLA\")\n\nbar1 <- ggplot() + \n  geom_bar(data=bigtenoffense22, aes(x=reorder(School, RushYds), weight=RushYds), fill=\"grey\") +\n  geom_bar(data=uclaOff, aes(x=reorder(School, RushYds), weight=RushYds), fill=\"#2D68C4\") +\n  geom_bar(data=uscOff, aes(x=reorder(School, RushYds), weight=RushYds), fill=\"#990000\") +\n  coord_flip() + \n  \n  labs(title=\"UCLA and USC can run... \", subtitle = \"Both teams are in the top half of Big Ten rushing offenses.\",  x=\"\", y=\"Rush Yards per Game\", caption = \"\") + \n  \n  theme_light() + \n  theme(\n     plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=9.5), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\nuscDef <- bigtendefense22 %>% filter(School == \"USC\")\nuclaDef <- bigtendefense22 %>% filter(School == \"UCLA\")\n\nbar2 <- ggplot() + \n  geom_bar(data=bigtendefense22, aes(x=reorder(School, desc(OppRushYds)), weight=OppRushYds), fill=\"grey\") +\n  geom_bar(data=uclaDef, aes(x=reorder(School, desc(OppRushYds)), weight=OppRushYds), fill=\"#2D68C4\") +\n  geom_bar(data=uscDef, aes(x=reorder(School, desc(OppRushYds)), weight=OppRushYds), fill=\"#990000\") +\n  coord_flip() + \n  \n  labs(title = \"...but they may struggle to defend it\", subtitle= \"But, they land in the bottom half defending the run.\", x=\"\", y=\"Opponent Rush Yards per Game\",  caption=\"Source: Sports Reference | By Ryan Kenney\") + \n  \n  theme_light() + \n  theme(\n   plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=9.5), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\nplot_grid(bar1, bar2) \n\n\n\n\n\nUCLA comes in as the second-best rushing offense in the Big Ten this seasoning only behind Michigan, who is averaging 250 rushing yards per game. USC also hangs in there, coming in above average at seventh to add to their dynamic passing offense. However, UCLA comes in at the middle of the pack in rushing defense and USC lands as the fifth-worst Big Ten rush defense, giving up an average of nearly 150 yards per game on the ground.\nMaybe UCLA and USC will be able to hang in games on the offensive side of the ball. But, it’s important to consider they’ll be facing tougher rushing defenses. The current Pac-12 rushing defense leader, Oregon, would only be fifth-best in the current Big Ten. So, the newcomers will need to get some stops on the defensive side as well to win games in their new conference.\nLet’s take a closer look at how UCLA and USC’s defenses compare to the rest of the Big Ten since its expansion in 2014.\n\n\nCode\nbigten <- c(\"Illinois\", \"Indiana\", \"Iowa\", \"Maryland\", \"Michigan State\", \"Michigan\", \"Minnesota\", \"Nebraska\", \"Northwestern\", \"Ohio State\", \"Penn State\", \"Purdue\", \"Rutgers\", \"Wisconsin\", \"UCLA\", \"USC\")\n\nbigtendefense <- teamdefense %>% filter(School %in% bigten)\n\nbigtenrank <- bigtendefense %>% group_by(Season) %>% \n  mutate(Rank = dense_rank(Pts))\n\nggplot() + \n  geom_bump(data=bigtenrank, aes(x=as.numeric(Season), y=Rank, color=School)) +\n  \n  geom_point(data=bigtenrank, aes(x=as.numeric(Season), y=Rank, color=School), size = 2) +\n  \n  geom_text_repel(data = bigtenrank %>% filter(as.numeric(Season) == 2014), aes(x = as.numeric(Season) - .05, y=Rank, label = School), size = 1.75, hjust = 1) +\n  geom_text(data = bigtenrank %>% filter(as.numeric(Season) == 2022), aes(x = as.numeric(Season) + .05, y=Rank, label = School), size = 1.75, hjust = 0) +\n  \n  scale_color_manual(values = c(\"grey\",\"grey\", \"grey\", \"grey\", \"grey\", \"grey\",\"grey\", \"grey\", \"grey\", \"grey\", \"grey\", \"grey\", \"grey\",\"#2D68C4\",\"#990000\",\"grey\")) +\n  \n  scale_x_continuous(breaks=c(2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022)) +\n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) +\n  \n  labs(title = \"UCLA and USC struggle to stop opponents from scoring\", subtitle=\"The Bruins and Trojans both lean on outscoring opponents. They win most of their games in shootouts, but that might not work against some stifling Big Ten defenses.\", y=\"Rank (Opponent Points per Game)\", x=\"Season\", caption=\"Source: Sports Reference | By Ryan Kenney\") +\n  \ntheme_light()+\n theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank()\n )\n\n\n\n\n\nNot too great. UCLA consistently hangs out with the Big Ten defenses that give up the most points per game. USC isn’t much better, peaking at sixth-best in 2020 before plummeting to the second-worst in 2021.\nAll of a sudden, it’s not looking as promising for the newcomers. Plus, many argue the Pac-12 is a step down in competition, so these aren’t even fair comparisons in the first place. Pac-12 teams have struggled to take the leap into elite territory. Only one team from the conference has made the College Football Playoff since its start, and it was the Oregon Ducks in the the Playoff’s first year (2014). Ironically, the Ducks fell in a 22-point loss to the Big Ten’s very own Ohio State Buckeyes.\nIs this competition gap still the case in 2022? Sports Reference gives us strength of schedule and simple rating data. Simple rating takes into account both strength of schedule and average point differential, meaning teams are rewarded for playing tough opponents, winning handily and, if they do lose, putting up a close fight.\n\n\nCode\nucla <- bigten22 %>% filter(Team == \"UCLA\")\nusc <- bigten22 %>% filter(Team == \"USC\")\n\nggplot() + \n  geom_point(\n    data=bigten22, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"black\", \n    alpha=.3) + \n  geom_point(\n    data=bigten22, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"gray25\") + \n  geom_point(\n    data=ucla, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#2D68C4\") + \n  geom_point(\n    data=usc, \n    aes(x=SRS, y=SOS, size=W), \n    color=\"#990000\") +\n  \n  geom_vline(xintercept = 7.1025) + \n  geom_hline(yintercept = 0.97125) +\n  \n  geom_text(aes(x=20.5, y=6, label=\"Good SRS, Good SOS\"), color=\"blue\") +\n  geom_text(aes(x=-4.5, y=-2.8, label=\"Bad SRS, Bad SOS\"), color=\"blue\") +\n  geom_text_repel(\n    data=bigten22, \n    aes(x=SRS, y=SOS, label=Team)\n  ) +\n  \n  geom_encircle(data=usc, aes(x=SRS-0.2, y=SOS), s_shape=.01, expand=.0000000001, colour=\"red\") + \n  \n   labs(\n    x=\"Simple Rating\", \n    y=\"Strength of Schedule\", \n    title=\"USC is passing tough tests this season\", \n    subtitle=\"USC has won six of seven games with a harder strength of schedule than any Big Ten team. \", \n    caption=\"Source: Sports Reference | By Ryan Kenney\",\n    size=\"Wins\"\n    ) +\n  \n  theme_light() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size = 10),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nWell, well, well. Both UCLA and USC find themselves with an above-average simple rating in the Big Ten. The Trojans take it a step further, boasting a 6-1 record despite having the strongest schedule in the conference. Several Pac-12 teams, including No. 8 Oregon and No. 14 Utah are having successful years, thus giving UCLA and USC worthy competition.\nUCLA and USC have arguably their strongest squads in years in 2022. Both teams are sitting with six wins and only one loss, having proved themselves against competent opponents. Thus, it’s hard to argue that entering a Big Ten schedule will come as too much of a shock.\nHowever, the style of football played in the Big Ten will take some getting used to. The Bruins and Trojans will face tougher defenses than ever before upon entering the conference, and their middle to below average rushing defenses will be tested by the strong rushing attacks of most Big Ten teams.\nBoth teams will be competitive in the conference early on, but they’ll likely have some work to do before they’re knocking off the powerhouses like Ohio State and Michigan.\nAs for that snowy, slow-paced matchup on the road against an average Big Ten team? Don’t be surprised if UCLA and USC fall short and get upset in a few of those games early on in their Big Ten careers."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Driven by the possibility of connecting with others and innovating, Ryan seeks opportunities to collaborate with others to creatively make a positive impact.\n\nThese motivations are evidenced by Ryan’s experience as a sales associate at Top Grills, a leadership mentor for Nebraska Human Resources Institute (NHRI) and the internal vice president of his fraternity, Pi Kappa Alpha. These positions have all given Ryan the freedom to come up with new ways to improve the organization he serves, and all share a core goal of making a positive, lasting impact on others. These experiences have led Ryan to value the diversification of education and declare majors in both marketing and sports media and communications.He is interested in applying my diverse strengths and skillset to marketing, branding, entrepreneurship and analytics.\n\nUpper management at Top Grills expressed their quick willingness to trust Ryan with several responsibilities because of my undeniable commitment to find unique ways to improve the customer experience. Additionally, customers gave glaring reviews of his enthusiasm and desire to help. Ryan’s position as a sales associate further developed his interpersonal skills and gave him valuable business and media experience, such as managing a retail store and executing advertisements.\n\nRyan is currently an intern at Gateway Auto, where he supports business operations through data analytics, automation and marketing. He enjoys the way this opportunity allows him to build valuable connections and demonstrate his ability to work with others to innovate.\n\nCliftonStrengths: Empathy | Futuristic | Restorative | Communication | Developer"
  },
  {
    "objectID": "posts/machine-learning-made-me-march-madness-royalty/index.html",
    "href": "posts/machine-learning-made-me-march-madness-royalty/index.html",
    "title": "Machine Learning Made Me March Madness Royalty",
    "section": "",
    "text": "Although my outlook is less doom and gloom than those of my classmates are bound to be, my model was certainly not perfect by any measure. Can you blame it, though? It’s March Madness, where perfection doesn’t exist. This was especially true this year, where the few (seeming) guarantees were shattered before our eyes.\nBefore work started on my model, my mind wandered to all the great possibilities. Not only would I win the class bracket challenge, but I’d dominate pools with family and friends for years to come.\nAfter diving in, my perspective certainly shifted. I came to learn the difficulty of building a model that separates itself from anything that already exists. I also grasped the reality of the wild and unpredictable nature March Madness (and sports in general).\nNonetheless, I ended up fairly confident in my final product, especially when comparing it to my classmates. This year, we faced a restricted pool of data to pull from. Some of the most important metrics, such as strength of schedule, came from KenPom, which was no longer available to us.\nAfter a late night on spring break, working until my screen was blurry, I successfully incorporated patchwork strength of schedule and simple rating system metrics into my model. This was the difference. This was the factor that turned my prediction from several 16 vs. 1 upsets to a close reflection of what I personally would predict without machine learning.\nThe rest of this post follows a journey through what went well, what went wrong and everything I learned along the way.\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(rvest)\nlibrary(gt)\n\nset.seed(1234)\n\ngames <- load_mbb_team_box(2015:2023)\n\nplayers <- load_mbb_player_box(2015:2023)\n\nstrength <- read_csv(\"strengthofs.csv\")\n\n\ngameswithpossessions <- games %>% \n  filter(game_date < as.Date(\"2023-03-14\")) %>% \n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    points_per_100 = (team_score/possessions)*100,\n    #effective_field_goal_percentage = (field_goals_made + 0.5 * three_point_field_goals_made)/field_goals_attempted,\n    true_shooting_percentage = team_score/(2*(field_goals_attempted+(0.44*free_throws_attempted))),\n    steals_and_blocks = steals + blocks\n  )%>% \n  filter(possessions <= 90 & possessions >= 53)\n\n\nplayervalues <- players %>% \n  filter(minutes > 0) %>% \n  mutate(\n    player_efficiency = points + rebounds + assists + steals + blocks - (field_goals_attempted - field_goals_made) - (free_throws_attempted - free_throws_made) - turnovers\n  ) %>% \n  group_by(game_id) %>% \n  summarise(\n    team_median_player_efficiency = median(player_efficiency),\n    team_mean_player_efficiency = mean(player_efficiency),\n    #max_player_efficiency = max(player_efficiency)\n  )\n\ngameswithpossessions <- gameswithpossessions %>% inner_join(playervalues)\n\n\nstrengthvalues <- strength %>% \n  mutate(\n    ...9 = as.numeric(\"2023\")\n  ) %>% \n  rename(\n    team_short_display_name = School,\n    season = ...9\n  )\n\ngameswithpossessions <- gameswithpossessions %>% inner_join(strengthvalues)\n\n\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(lag(points_per_100, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_offensive_rebounds = rollmean(lag(offensive_rebounds, n=1), k=10, align=\"right\", fill=NA),\n    #team_rolling_effective_field_goal_percentage = rollmean(lag(effective_field_goal_percentage, n=1), k=8, align=\"right\", fill=NA),\n    team_cumulative_ppp = lag(cummean(points_per_100), n=1),\n    team_rolling_true_shooting_percentage = rollmean(lag(true_shooting_percentage, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_offensive_rebounds = rollmean(lag(offensive_rebounds, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_steals_and_blocks = rollmean(lag(steals_and_blocks, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_SOS = rollmean(lag(SOS, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_SRS = rollmean(lag(SRS, n=1), k=10, align = \"right\", fill=NA),\n    team_rolling_median_player_efficiency = rollmean(lag(team_median_player_efficiency, n=1), k=12, align = \"right\", fill=NA),\n    team_rolling_mean_player_efficiency = rollmean(lag(team_mean_player_efficiency, n=1), k=12, align = \"right\", fill=NA)\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_possessions = possessions,\n    team_rolling_ppp,\n    team_rolling_offensive_rebounds,\n    #team_rolling_effective_field_goal_percentage,\n    team_cumulative_ppp,\n    team_rolling_true_shooting_percentage,\n    team_rolling_offensive_rebounds,\n    team_rolling_steals_and_blocks,\n    team_rolling_median_player_efficiency,\n    team_rolling_mean_player_efficiency,\n    #max_player_efficiency,\n    team_rolling_SOS,\n    team_rolling_SRS\n    ) \n\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = team_possessions,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_offensive_rebounds = team_rolling_offensive_rebounds,\n   # opponent_rolling_effective_field_goal_percentage = team_rolling_effective_field_goal_percentage,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_rolling_true_shooting_percentage = team_rolling_true_shooting_percentage,\n    opponent_rolling_offensive_rebounds = team_rolling_offensive_rebounds,\n    opponent_rolling_steals_and_blocks = team_rolling_steals_and_blocks,\n    opponent_rolling_median_player_efficiency = team_rolling_median_player_efficiency,\n    opponent_rolling_mean_player_efficiency = team_rolling_mean_player_efficiency,\n    #opponent_max_player_efficiency = max_player_efficiency,\n   opponent_rolling_SOS = team_rolling_SOS,\n   opponent_rolling_SRS = team_rolling_SRS\n  )\n\n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\nteamdefensiveefficiency <- gameswithsides %>% \n  arrange(game_date) %>% \n  group_by(team_short_display_name, season) %>% \n  mutate(\n    team_rolling_defensive_ppp = rollmean(lag((opponent_score/opponent_possessions)*100, n=1), k=10, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, team_short_display_name, team_rolling_defensive_ppp)\nopponentdefensiveefficiency <- gameswithsides %>% \n  arrange(game_date) %>% \n  group_by(opponent_short_display_name, season) %>% \n  mutate(\n    opponent_rolling_defensive_ppp = rollmean(lag((team_score/team_possessions)*100, n=1), k=10, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, opponent_short_display_name, opponent_rolling_defensive_ppp)\ngameswithsides <- gameswithsides %>% inner_join(teamdefensiveefficiency)\ngameswithsides <- gameswithsides %>% inner_join(opponentdefensiveefficiency)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) \n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    team_rolling_offensive_rebounds,\n    opponent_rolling_offensive_rebounds,\n    team_rolling_steals_and_blocks,\n    opponent_rolling_steals_and_blocks,\n    #team_rolling_effective_field_goal_percentage,\n    #opponent_rolling_effective_field_goal_percentage,\n    team_cumulative_ppp,\n    opponent_cumulative_ppp,\n    team_rolling_true_shooting_percentage,\n    opponent_rolling_true_shooting_percentage,\n    team_rolling_median_player_efficiency,\n    opponent_rolling_median_player_efficiency,\n    team_rolling_mean_player_efficiency,\n    opponent_rolling_mean_player_efficiency,\n    #max_player_efficiency,\n    team_rolling_SOS,\n    opponent_rolling_SOS,\n    team_rolling_SRS,\n    opponent_rolling_SRS,\n    team_result\n    ) %>% na.omit()\n\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\n\nlog_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\") %>%\n  set_mode(\"classification\")\n\nrf_mod <- \n  rand_forest() %>% \n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\")\n\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"classification\")\n\nsvm_mod <- \n  svm_poly() %>%\n  set_engine(\"kernlab\") %>%\n  set_mode(\"classification\")\n\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\")\n\n\nlog_workflow <- \n  workflow() %>% \n  add_model(log_mod) %>% \n  add_recipe(game_recipe)\n\nrf_workflow <- \n  workflow() %>% \n  add_model(rf_mod) %>% \n  add_recipe(game_recipe)\n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(game_recipe)\n\nsvm_workflow <- \n  workflow() %>% \n  add_model(svm_mod) %>% \n  add_recipe(game_recipe)\n\n\n\nlog_fit <- \n  log_workflow %>% \n  fit(data = game_train)\n\nrf_fit <- \n  rf_workflow %>% \n  fit(data = game_train)\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = game_train)\n\nsvm_fit <- \n  svm_workflow %>% \n  fit(data = game_train)\n\n\n Setting default kernel parameters  \n\n\nCode\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(points_per_100, k=10, align=\"right\", fill=NA),\n    team_rolling_offensive_rebounds = rollmean(offensive_rebounds, k=10, align=\"right\", fill=NA),\n    #team_rolling_effective_field_goal_percentage = rollmean(effective_field_goal_percentage, k=8, align=\"right\", fill=NA),\n    team_cumulative_ppp = cummean(points_per_100),\n    team_rolling_true_shooting_percentage = rollmean(true_shooting_percentage, k=10, align = \"right\", fill=NA),\n    team_rolling_offensive_rebounds = rollmean(offensive_rebounds, k=10, align = \"right\", fill=NA),\n    team_rolling_steals_and_blocks = rollmean(steals_and_blocks, k=10, align = \"right\", fill=NA),\n    team_rolling_SOS = rollmean(SOS, k=10, align = \"right\", fill=NA),\n    team_rolling_SRS = rollmean(SRS, k=10, align = \"right\", fill=NA),\n    team_rolling_median_player_efficiency = rollmean(lag(team_median_player_efficiency, n=1), k=12, align = \"right\", fill=NA),\n    team_rolling_mean_player_efficiency = rollmean(lag(team_mean_player_efficiency, n=1), k=12, align = \"right\", fill=NA)\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_possessions = possessions,\n    team_rolling_ppp,\n    team_rolling_offensive_rebounds,\n    #team_rolling_effective_field_goal_percentage,\n    team_cumulative_ppp,\n    team_rolling_true_shooting_percentage,\n    team_rolling_offensive_rebounds,\n    team_rolling_steals_and_blocks,\n    team_rolling_median_player_efficiency,\n    team_rolling_mean_player_efficiency,\n    #max_player_efficiency,\n    team_rolling_SOS,\n    team_rolling_SRS\n    ) \n\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = team_possessions,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_offensive_rebounds = team_rolling_offensive_rebounds,\n   # opponent_rolling_effective_field_goal_percentage = team_rolling_effective_field_goal_percentage,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_rolling_true_shooting_percentage = team_rolling_true_shooting_percentage,\n    opponent_rolling_offensive_rebounds = team_rolling_offensive_rebounds,\n    opponent_rolling_steals_and_blocks = team_rolling_steals_and_blocks,\n    opponent_rolling_median_player_efficiency = team_rolling_median_player_efficiency,\n    opponent_rolling_mean_player_efficiency = team_rolling_mean_player_efficiency,\n    #opponent_max_player_efficiency = max_player_efficiency,\n   opponent_rolling_SOS = team_rolling_SOS,\n   opponent_rolling_SRS = team_rolling_SRS\n  )\n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\n\nteamdefensiveefficiency <- gameswithsides %>% \n  arrange(game_date) %>% \n  group_by(team_short_display_name, season) %>% \n  mutate(\n    team_rolling_defensive_ppp = rollmean((opponent_score/opponent_possessions)*100, k=10, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, team_short_display_name, team_rolling_defensive_ppp)\nopponentdefensiveefficiency <- gameswithsides %>% \n  arrange(game_date) %>% \n  group_by(opponent_short_display_name, season) %>% \n  mutate(\n    opponent_rolling_defensive_ppp = rollmean((team_score/team_possessions)*100, k=10, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, opponent_short_display_name, opponent_rolling_defensive_ppp)\ngameswithsides <- gameswithsides %>% inner_join(teamdefensiveefficiency)\ngameswithsides <- gameswithsides %>% inner_join(opponentdefensiveefficiency)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) \n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    team_rolling_offensive_rebounds,\n    opponent_rolling_offensive_rebounds,\n    team_rolling_steals_and_blocks,\n    opponent_rolling_steals_and_blocks,\n    #team_rolling_effective_field_goal_percentage,\n    #opponent_rolling_effective_field_goal_percentage,\n    team_cumulative_ppp,\n    opponent_cumulative_ppp,\n    team_rolling_true_shooting_percentage,\n    opponent_rolling_true_shooting_percentage,\n    team_rolling_median_player_efficiency,\n    opponent_rolling_median_player_efficiency,\n    team_rolling_mean_player_efficiency,\n    opponent_rolling_mean_player_efficiency,\n    #max_player_efficiency,\n    team_rolling_SOS,\n    opponent_rolling_SOS,\n    team_rolling_SRS,\n    opponent_rolling_SRS,\n    team_result\n    ) %>% na.omit()\n\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround1games)\n\nsouthround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround1games) \n\nsouthround1 <- svm_fit %>% predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- svm_fit %>% predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Baylor\"\n) %>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n)\n\nsouthround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround2games)\n\nsouthround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround2games) \n\nsouthround2 <- svm_fit %>% predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- svm_fit %>% predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"San Diego St\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Arizona\"\n)\n\n\nsouthround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround3games)\n\nsouthround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround3games) \n\nsouthround3 <- svm_fit %>% predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- svm_fit %>% predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Arizona\"\n)\n\n\nsouthround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround4games)\n\nsouthround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround4games) \n\nsouthround4 <- svm_fit %>% predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- svm_fit %>% predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Mississippi St\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround1games)\n\nmidwestround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround1games) \n\nmidwestround1 <- svm_fit %>% predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- svm_fit %>% predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Indiana\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Texas\"\n)\n\nmidwestround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround2games)\n\nmidwestround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround2games) \n\nmidwestround2 <- svm_fit %>% predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- svm_fit %>% predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Indiana\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Texas\"\n)\n\n\nmidwestround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround3games)\n\nmidwestround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround3games) \n\nmidwestround3 <- svm_fit %>% predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- svm_fit %>% predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Texas\"\n)\n\n\nmidwestround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround4games)\n\nmidwestround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround4games) \n\nmidwestround4 <- svm_fit %>% predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- svm_fit %>% predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona St\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround1games)\n\nwestround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround1games) \n\nwestround1 <- svm_fit %>% predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- svm_fit %>% predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround2games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"UConn\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"UCLA\"\n)\n\nwestround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround2games)\n\nwestround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround2games) \n\nwestround2 <- svm_fit %>% predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- svm_fit %>% predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround3games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"UConn\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UCLA\"\n)\n\n\nwestround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround3games)\n\nwestround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround3games) \n\nwestround3 <- svm_fit %>% predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- svm_fit %>% predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround4games <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"UCLA\"\n)\n\n\nwestround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround4games)\n\nwestround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround4games) \n\nwestround4 <- svm_fit %>% predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- svm_fit %>% predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround1games)\n\neastround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround1games) \n\neastround1 <- svm_fit %>% predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- svm_fit %>% predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Memphis\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Tennessee\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas St\"\n) %>% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Marquette\"\n)\n\neastround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround2games)\n\neastround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround2games) \n\neastround2 <- svm_fit %>% predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- svm_fit %>% predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Tennessee\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Marquette\"\n)\n\n\neastround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround3games)\n\neastround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround3games) \n\neastround3 <- svm_fit %>% predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- svm_fit %>% predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4games <- tibble(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Marquette\"\n)\n\n\neastround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround4games)\n\neastround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround4games) \n\neastround4 <- svm_fit %>% predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- svm_fit %>% predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Tennessee\"\n) %>% add_row(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"UCLA\"\n)\n\n\nfinalfourgames <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(finalfourgames)\n\nfinalfourgames <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(finalfourgames) \n\nfinalfour <- svm_fit %>% predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- svm_fit %>% predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nncaachampionshipgame <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Houston\"\n) \n\nncaachampionshipgame <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(ncaachampionshipgame)\n\nncaachampionshipgame <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(ncaachampionshipgame) \n\nncaachampionship <- svm_fit %>% predict(new_data = ncaachampionshipgame) %>%\n  bind_cols(ncaachampionshipgame) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nncaachampionship <- svm_fit %>% predict(new_data = ncaachampionshipgame, type=\"prob\") %>%\n  bind_cols(ncaachampionship) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nThe stars of my predictors were strength of schedule (SOS) and simple rating system (SRS), which takes into account SOS and average point differential. Thus, SRS rewards teams that win handily and show grace toward teams that lose if their opponent was strong and/or the final score was tight. Despite what the title of the predictor indicates, I actually couldn’t get these metrics to be on a rolling basis. Instead, I settled for applying a team’s SOS and SRS at the end of the season, which I pulled from Sports Reference.\nThen came the supporting cast. These metrics were taken on a rolling basis, going back 10 games. I went back 10 games instead of using the entire season to account for hot streaks and momentum entering the tournament, injuries and teams that got better or worse as the season went on.\nAt the core of the supporting cast were offensive and defensive efficiency. Denoted by “ppp” (points per possession) in the model, efficiency metrics are the big thing in college basketball and are very telling when predicting a team’s success in March Madness against new opponents. For this one metric, I also included a cumulative average for a team’s entire season. I also added true shooting percentage, which adjusts for three pointers and free throws and measures shooting efficiency.\nSince basketball is a game that can be heavily influenced by a singular player, I also pulled player box score data and calculated player efficiency. In addition to the mean player efficiency on a team, I also included a median value. Median is a measure of average less susceptible to outliers, so it is more likely to show how well-rounded or deep a team is.\nI rounded off my model with some common-sense metrics, those I decided to include after thinking critically about what makes a basketball team good. These metrics were offensive rebounds and a combination of steals and blocks. Teams with high performance in these three stats give themselves more possessions and opportunities to score. They also hound their opponents on defense and take the ball away often.\n\n\nCode\nsummary(game_recipe) %>%\n  select(variable, role) %>% \n  filter(role != \"ID\") %>%\n  gt() %>%\n  tab_header(\n    title = \"Predictive Metrics\",\n    subtitle = \"The stars, SOS and SRS, supported by efficiencies and common sense stats\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Ryan Kenney\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predictive Metrics\n    \n    \n      The stars, SOS and SRS, supported by efficiencies and common sense stats\n    \n    \n      variable\n      role\n    \n  \n  \n    team_rolling_ppp\npredictor\n    opponent_rolling_ppp\npredictor\n    team_rolling_offensive_rebounds\npredictor\n    opponent_rolling_offensive_rebounds\npredictor\n    team_rolling_steals_and_blocks\npredictor\n    opponent_rolling_steals_and_blocks\npredictor\n    team_cumulative_ppp\npredictor\n    opponent_cumulative_ppp\npredictor\n    team_rolling_true_shooting_percentage\npredictor\n    opponent_rolling_true_shooting_percentage\npredictor\n    team_rolling_median_player_efficiency\npredictor\n    opponent_rolling_median_player_efficiency\npredictor\n    team_rolling_mean_player_efficiency\npredictor\n    opponent_rolling_mean_player_efficiency\npredictor\n    team_rolling_SOS\npredictor\n    opponent_rolling_SOS\npredictor\n    team_rolling_SRS\npredictor\n    opponent_rolling_SRS\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Ryan Kenney\n    \n  \n  \n\n\n\n\nThe following graph illustrates why I thought these predictors would work. Though not a guarantee, more teams win the higher their efficiency is and the lower their opponent’s efficiency is over the past 10 games.\nThis concept makes sense. But, mapping it out with actual game results shows the strong correlation present and gives my model foundation.\n\n\nCode\nggplot() + \n  geom_point(\n    data=modelgames, aes(x=team_rolling_ppp, y=opponent_rolling_ppp, color=team_result))+\n\nlabs(\n    x=\"Cumulative Efficiency\", \n    y=\"Opponent Cumulative Efficiency\", \n    title=\"The More Efficient Team Generally Wins\", \n    subtitle=\"This philosophy guided the building of my model and the inclusion of efficiency-based metrics\", \n    caption=\"Source: HoopR | By: Ryan Kenney\"\n    ) +\n  \n  theme_light() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size = 10),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\nAs the tournament approached, I continually tested different predictors and their accuracy with different algorithms (hence the four different algorithms in my code). In the end, I found the support vector machine gave me the best accuracy and was robust between training and testing data, so this is the algorithm I used to predict tournament games.\nHere is a visual example of an output from my model. Given, for example, the first round games in the East region, the model outputs one of the teams in the matchup, whether or not it predicts that team to win or lose, the win confidence (%) and the team’s opponent.\nAs you can see, the model was far from perfection. Purdue, who lost in the first round, was given over a 99% chance to win. But, then again, who realistically predicts an upset of that caliber.\nFAU, who made the final four as a nine seed, wasn’t even predicted to make it past the first round, according to my model.\n\n\nCode\neastround1 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"East Regional: Round 1\",\n    subtitle = \"My model had Final-Four-bound FAU knocked out in the first round\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"By: Ryan Kenney\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      East Regional: Round 1\n    \n    \n      My model had Final-Four-bound FAU knocked out in the first round\n    \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Memphis\nW\n59.6%\nFAU\n    Purdue\nW\n99.3%\nFair Dickinson\n    Tennessee\nW\n96.3%\nLouisiana\n    Kansas St\nW\n90.8%\nMontana St\n    Duke\nW\n71.0%\nOral Roberts\n    Kentucky\nW\n57.1%\nProvidence\n    Michigan St\nL\n46.7%\nUSC\n    Marquette\nW\n89.5%\nVermont\n  \n  \n    \n      By: Ryan Kenney\n    \n  \n  \n\n\n\n\nNow, I leave you with the entirety of my bracket, built entirely with the predictions of my model. This final product was good enough for a respectable but not overly impressive 79th percentile on ESPN.\n\n\n\nSouth Regional\n\n\n\n\n\nMidwest Regional\n\n\n\n\n\nWest Regional\n\n\n\n\n\nEast Regional\n\n\n\n\n\nFinal Four\n\n\nMuch of the code used to build this model relies on hoopR and tidymodels."
  },
  {
    "objectID": "posts/the-top-five-rookie-wide-receivers-to-steal-in-your-2023-fantasy-football-draft/index.html",
    "href": "posts/the-top-five-rookie-wide-receivers-to-steal-in-your-2023-fantasy-football-draft/index.html",
    "title": "The Top Five Rookie Wide Receivers to Steal in Your 2023 Fantasy Football Draft",
    "section": "",
    "text": "When determining the metrics to use as predictors for my model, I was careful to watch for multicollinearity. This occurs when two independent variables are highly correlated to each other and make it difficult to decipher the individual effect on the dependent variable, in this case fantasy points. For instance, a player with a high pre-draft grade is usually selected at a high overall pick, so it is not necessary to use both pre-draft grade and overall selection in my model.\nIn the end, I utilized the total touchdowns and average yards per reception of the receiver in college, as well as their rating and overall selection in this year’s draft.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(cfbfastR)\nlibrary(janitor)\nlibrary(bonsai)\nlibrary(gt)\nlibrary(corrr)\n\nset.seed(1234)\n\nwrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrdraftedstatswithratings.csv\") %>% mutate(FantPt = case_when(FantPt == 0 ~ NA, TRUE ~ FantPt))\n\nwrselected <- wrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_touchdowns,\n    total_ypr,\n    rating,\n    FantPt\n  ) %>% na.omit()\n\nwrselected %>% select(\n    overall,\n    total_touchdowns,\n    total_ypr,\n    rating,\n    FantPt) %>% \n  correlate()\n\n\n# A tibble: 5 × 6\n  term             overall total_touchdowns total_ypr  rating FantPt\n  <chr>              <dbl>            <dbl>     <dbl>   <dbl>  <dbl>\n1 overall           NA               -0.383   -0.142  -0.210  -0.533\n2 total_touchdowns  -0.383           NA        0.142  -0.203   0.159\n3 total_ypr         -0.142            0.142   NA       0.0487  0.152\n4 rating            -0.210           -0.203    0.0487 NA       0.174\n5 FantPt            -0.533            0.159    0.152   0.174  NA    \n\n\nCode\nplayer_split <- initial_split(wrselected, prop = .8)\n\nplayer_train <- training(player_split)\nplayer_test <- testing(player_split)\n\nplayer_recipe <- \n  recipe(FantPt ~ ., data = player_train) %>%\n  update_role(name, year, college_team, nfl_team, new_role = \"ID\")\n\nsummary(player_recipe)\n\n\n# A tibble: 9 × 4\n  variable         type      role      source  \n  <chr>            <list>    <chr>     <chr>   \n1 name             <chr [3]> ID        original\n2 year             <chr [2]> ID        original\n3 college_team     <chr [3]> ID        original\n4 nfl_team         <chr [3]> ID        original\n5 overall          <chr [2]> predictor original\n6 total_touchdowns <chr [2]> predictor original\n7 total_ypr        <chr [2]> predictor original\n8 rating           <chr [2]> predictor original\n9 FantPt           <chr [2]> outcome   original\n\n\nCode\nxg_mod <- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"xgboost\")\n\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"regression\")\n\nxg_workflow <- \n  workflow() %>% \n  add_model(xg_mod) %>% \n  add_recipe(player_recipe)\n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(player_recipe)\n\nxgb_grid <- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\n\nplayer_folds <- vfold_cv(player_train)\n\nxgb_res <- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\n\nbest_rmse <- select_best(xgb_res, \"rmse\")\n\nfinal_xgb <- finalize_workflow(\n  xg_workflow,\n  best_rmse\n) \n\nxg_fit <- \n  final_xgb %>% \n  fit(data = player_train)\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = player_train)\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\nlightgbmtestpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\nxgtestpredict <- \n  xg_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\ncurrentwrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/currentwrstats.csv\")\n\ncurrentwrselected <- currentwrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_touchdowns,\n    total_ypr,\n    rating\n  ) %>% na.omit()\n\ncurrentxgpredict <- \n  xg_fit %>% \n  predict(new_data = currentwrselected) %>%\n  bind_cols(currentwrselected) \n\ncurrentxgpredict %>% \n  top_n(5, wt=.pred) %>%\n  select(name, college_team, nfl_team, overall, .pred) %>%\n  arrange(desc(.pred)) %>%\n  gt() %>% \n  cols_label(\n    name = \"Name\",\n    college_team = \"College\",\n    nfl_team = \"NFL Team\",\n    overall = \"Overall Draft Pick\",\n    .pred = \"Predicted Fantasy Points\"\n  ) %>% \n  tab_header(\n    title = \"Title\",\n    subtitle = \"Subtitle\"\n  ) %>% \n  tab_source_note(source_note = \"By: Ryan Kenney | Source: cfbfastR\") %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")) %>% \n    tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"subtitle\")) %>% \n      tab_style(\n        locations = cells_column_labels(columns = everything()),\n        style = list(\n          cell_borders(sides = \"bottom\", weight = px(3)),\n          cell_text(weight = \"bold\", size = 12)\n        )\n      ) %>% \n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Title\n    \n    \n      Subtitle\n    \n    \n      Name\n      College\n      NFL Team\n      Overall Draft Pick\n      Predicted Fantasy Points\n    \n  \n  \n    Quentin Johnston\nTCU\nLos Angeles\n21\n85.04259\n    Jordan Addison\nUSC\nMinnesota\n23\n81.27210\n    Jaxon Smith-Njigba\nOhio State\nSeattle\n20\n76.24333\n    Zay Flowers\nBoston College\nBaltimore\n22\n65.43703\n    Jonathan Mingo\nOle Miss\nCarolina\n39\n65.25072\n  \n  \n    \n      By: Ryan Kenney | Source: cfbfastR\n    \n  \n  \n\n\n\n\n\n#1 Quentin Johnston\nQuentin Johnston, the second receiver taken in the 2023 NFL Draft, comes in at number one in my rookie wide receiver predictions. Johnston is a big and athletic receiver who offers plenty of after the catch ability. He comes into an offense with prolific passer Justin Herbert. Johnston’s 85 predicted fantasy points would place him in the range of Lions receivers Josh Reynolds and DJ Chark last season.\n\n\n#2 Jordan Addison\nAt the second spot is Jordan Addison out of USC. Addison benefits from a fantasy-friendly situation. He’ll line up along side Justin Jefferson in a Minnesota offense that recently lost its #2 receiver, Adam Thielen. Expect lots of usage early for Addison, resulting in around 81 fantasy points, landing him around Bears top receiver Darnell Mooney from last year.\n\n\n#3 Jaxon Smith-Njigba\nThe first-selected receiver falls at third in my rankings. Smith-Njigba was as efficient as they come in college at Ohio State. He fits perfectly with DK Metcalf and Tyler Lockett in Seattle, but his fantasy production is limited by the presence of those two solid veterans. Expect around 76 fantasy points, a number comparable to Seattle’s Marquise Goodwin, who was the team’s WR3 last season.\n\n\n#4 Zay Flowers\nFlowers is undersized but explosive. He has the chance to have some big moments, but fantasy production may be sporadic in the Ravens’ offense. Players like Randall Cobb of Green Bay and Van Jefferson of the Rams were comparable last season, finishing around 65 points. These receivers had a few bright flashes and stepped up when their teams needed them due to other injuries.\n\n\n#5 Jonathan Mingo\nRounding out the top five is Jonathan Mingo of Ole Miss. Mingo enters a Carolina offense with a lot of unknowns. While this could hurt his production, it also gives him plenty of fantasy upside if he can click with rookie quarterback, first overall selection Bryce Young. A predicted 65 fantasy points puts him in a similar range as Flowers."
  }
]